name: Deploy to Google Cloud Run

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'prod'
        type: choice
        options:
          - dev
          - staging
          - prod

env:
  PROJECT_ID: tax-2025-calc
  REGION: us-west1
  SERVICE_NAME: tax-calculator-app
  REGISTRY: gcr.io

jobs:
  # Test and build job
  test-and-build:
    runs-on: ubuntu-latest
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install pnpm
        run: npm install -g pnpm
        
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Run linting
        run: pnpm run lint
        
      - name: Run tests
        run: pnpm run test
        
      - name: Build application
        run: pnpm run build
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: dist/
          retention-days: 1
          
      # Docker build and push (only on main branch or manual trigger)
      - name: Set up Docker Buildx
        if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
        uses: docker/setup-buildx-action@v3
        
      - name: Generate image metadata
        if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            
      - name: Authenticate to Google Cloud
        if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          
      - name: Configure Docker for GCR
        if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
        run: gcloud auth configure-docker --quiet
        
      - name: Build and push Docker image
        if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
          build-args: |
            BUILDKIT_INLINE_CACHE=1

  # Security scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: test-and-build
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.test-and-build.outputs.image-tag }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Deploy to Cloud Run
  deploy:
    runs-on: ubuntu-latest
    needs: [test-and-build, security-scan]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    environment: 
      name: ${{ github.event.inputs.environment || 'prod' }}
      url: ${{ steps.deploy.outputs.url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
          
      - name: Deploy to Cloud Run
        id: deploy
        run: |
          # Deploy the service
          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --image ${{ needs.test-and-build.outputs.image-tag }} \
            --platform managed \
            --region ${{ env.REGION }} \
            --allow-unauthenticated \
            --memory 512Mi \
            --cpu 1 \
            --min-instances 0 \
            --max-instances 10 \
            --concurrency 80 \
            --timeout 300 \
            --set-env-vars "NODE_ENV=production,PORT=8080" \
            --port 8080 \
            --quiet
            
          # Get the service URL
          SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
            --region ${{ env.REGION }} \
            --format 'value(status.url)')
            
          echo "Service deployed successfully!"
          echo "URL: $SERVICE_URL"
          echo "url=$SERVICE_URL" >> $GITHUB_OUTPUT
          
      - name: Verify deployment
        run: |
          # Wait for service to be ready
          sleep 30
          
          # Health check
          SERVICE_URL="${{ steps.deploy.outputs.url }}"
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$SERVICE_URL/health" || echo "000")
          
          if [ "$HTTP_STATUS" -eq 200 ]; then
            echo "‚úÖ Health check passed (HTTP $HTTP_STATUS)"
          else
            echo "‚ùå Health check failed (HTTP $HTTP_STATUS)"
            exit 1
          fi
          
          # Basic functionality test
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$SERVICE_URL" || echo "000")
          
          if [ "$HTTP_STATUS" -eq 200 ]; then
            echo "‚úÖ Application is serving correctly (HTTP $HTTP_STATUS)"
          else
            echo "‚ùå Application test failed (HTTP $HTTP_STATUS)"
            exit 1
          fi
          
      - name: Update deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "üöÄ Deployment completed successfully!"
            echo "üåê Application URL: ${{ steps.deploy.outputs.url }}"
          else
            echo "üí• Deployment failed!"
            exit 1
          fi

  # Performance testing (optional)
  performance-test:
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    
    steps:
      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            ${{ needs.deploy.outputs.url }}
          uploadArtifacts: true
          temporaryPublicStorage: true
          
  # Cleanup on failure
  cleanup-on-failure:
    runs-on: ubuntu-latest
    needs: [test-and-build, security-scan, deploy]
    if: failure() && (github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch')
    
    steps:
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          
      - name: Rollback on failure
        run: |
          echo "üîÑ Rolling back to previous revision..."
          
          # Get previous revision
          PREVIOUS_REVISION=$(gcloud run revisions list \
            --service ${{ env.SERVICE_NAME }} \
            --region ${{ env.REGION }} \
            --format "value(metadata.name)" \
            --limit 2 | tail -n 1)
            
          if [ -n "$PREVIOUS_REVISION" ]; then
            gcloud run services update-traffic ${{ env.SERVICE_NAME }} \
              --region ${{ env.REGION }} \
              --to-revisions $PREVIOUS_REVISION=100
            echo "‚úÖ Rolled back to revision: $PREVIOUS_REVISION"
          else
            echo "‚ö†Ô∏è No previous revision found to rollback to"
          fi